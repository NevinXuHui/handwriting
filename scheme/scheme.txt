手绘原笔迹实现思路

预期效果如下：
1）平滑效果
2）真实笔锋效果


平滑效果实现：
3阶贝塞尔曲线实现，需要找到曲线拟合点，以达到绘制曲线效果

注意事项：为了达到连贯的优质效果，当第二条线段出现的时候，才计算出第一条的曲线，以此类推，当绘制到最后一条线段的时候，重复添加最有一个点，来完成最后一条线段的绘制


真实笔锋实现：
结合压感和速度计算出画笔宽度因子
注意事项：具体算法，不能采用线性算法


特殊情况处理：

1）线条宽度过渡：总体思路份两部过滤


第一步：利用下面非线性函数----》过滤掉两点距离很短、线条宽度过大场景

W_current = 
　　W_previous + min( abs(k*s - W_previous), distance * K_width_unit_change) ---------->(k * s-W_previous) >= 0
　　W_previous - min( abs(k*s - W_previous), distance * K_width_unit_change) ---------->(k * s-W_previous) < 0

参数注释：
k*s                     线条宽度与速度，压感之间的一种线性关系
W_current 　　　　  	当前线段的宽度
W_previous　　　　	    与当前线条相邻的前一条线段的宽度
distance 　　	　　    当前线条的长度
K_width_unit_change 　　设定的一个固定阈值,表示:单位距离内, 笔
迹的线条宽度可以变化的最大量.
distance * w_k 　　     即为当前线段的长度内, 笔宽可以相对于前一条线段笔宽的基础上, 最多能够变宽或者可以变窄多少


第二步：利用下面思路处理----》线条宽度很大，距离也很大场景（增加辅助点，采用微分思想）

当相邻两个点的线条宽度相差很大的时候，为了避免绘制出现的衔接突兀问题，需采用重新微分的思想，即：在两个点之间通过计算出合理的梯度（需要预先设置，梯度越小，线条粗细过渡越和谐，越接近真实手写笔迹），来增加新的辅助点


2）尾部处理：当最后一个点的速度达到一个设定值（预先设置好，改变这个值可以不断优化尾部尖尖的笔锋效果），需要进行尾部笔锋补充


3）头部处理（优先级低）：预先设定一个速度阈值（改变阈值可不断优化笔锋效果），根据第一段的手势速度，来处理是否需要添加尖尖笔锋效果


4）曲线段衔接处理（效果有待验证）：笔锋外边---》扇形切面填充
